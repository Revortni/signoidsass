// ==========================================================================
// Utilities
// Define functions and mixins at this partial.
// ==========================================================================

// Functions

// Add pixel unit
// $value     - Value for adding px unit
// @returns   - number
@function addPxUnit($value) {
  @if unitless($value) {
    $value: $value * 1px;
  }
  @return $value;
}

// Convert pixels to em
// $target    - Value to be converted into em
// $context   - Default: Base font size. Base font size is usually 16px depending on browser default font size
// @returns   - number
@function em($target, $context: $base__font-size) {
  $target: addPxUnit($target);
  $context: addPxUnit($context);
  @return ($target/$context) * 1em;
}

// Convert pixels to rem
// $target    - Value to be converted into rem
// $context   - Default: Base font size. Base font size is usually 16px depending on browser default font size
// @returns   - number
@function rem($target, $context: $base__font-size) {
  $target: addPxUnit($target);
  $context: addPxUnit($context);
  @return $target/$context * 1rem;
}

// Convert pixels to percentage
// $target    - Value to be converted into percentage
// $context   - Context on which target needs to be relative to for percentage conversion
// @returns   - number
@function pntg($target, $context) {
  @return ($target/$context) * 100%;
}

// Calculate if number is even or not
// $number    - Number to be verified
// @returns   - boolean
@function even($number) {
  @if $number%2 == 0 {
    @return true;
  } @else {
    @return false;
  }
}

//BEM(Block Element Modifier) Naming Convention
// For Element
// $element  - Just the element name for the parent block (doesn't require the parent Block name)
// @usage    - `.Nav {@include e(item){...}}`
@mixin e($element) {
  &__#{$element} {
    @content;
  }
}

// For Modifier
// $modifier  - Just the modifier name for the parent block or element
// @usage     - `.Nav {@include e(item) {@include m(active) {...}}}`
@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}

// Media Queries
// $break  - RWD break point values, change them in _config.scss. Default: bootstrap grid
// @usage  - `.Nav {@include mq(sm) {...}}`
@mixin mq($break) {
  @if $break == 'xs' {
    //lowest breakpoint value
    @content;
  } @else if $break == 'sm' {
    // phone
    @media (min-width: $sm-device) {
      @content;
    }
  } @else if $break == 'md' {
    // tablet
    @media (min-width: $md-device) {
      @content;
    }
  } @else if $break == 'lg' {
    // laptop and desktop
    @media (min-width: $lg-device) {
      @content;
    }
  } @else if $break == 'xl' {
    // High res desktop and TVs
    @media (min-width: $xl-device) {
      @content;
    }
  } @else {
    @error "No value could be retrieved for '#{$break}'";
  }
}

// Hover mixin
// @usage  - `button {@include hover {...}}`
@mixin hover {
  &:hover,
  &:active,
  &:focus {
    @extend %hover;
    @content;
  }
}
