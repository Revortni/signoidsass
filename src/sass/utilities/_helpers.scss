// ==========================================================================
// Helpers
// Helpers classes such as object classes used for floating an element left and right,
// text alignments etc. are included here.
// Simple helper classes are generally referred using class selectors and their css properties
// will have an !important property attached to it, so that a helper class cannot be overwritten.
// Placeholders can also be included in the helper partial for these purposes.
// ==========================================================================

//Screen reader text:
.srt {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}
%clearfix-none {
  display: inherit;
}
%pseudos {
  display: block;
  content: '';
  position: absolute;
}
%shadow {
  -webkit-box-shadow: 0px 8px 12px -6px transparentize($black, 0.8);
  -moz-box-shadow: 0px 8px 12px -6px transparentize($black, 0.8);
  box-shadow: 0px 8px 12px -6px transparentize($black, 0.8);
}
%ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

%flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

%border {
  border: 1px solid $lighter;
  border-radius: 3px;
}

/* Loop to generate padding and margin starts*/

$multiplier: 4;
$sides: (top, bottom, left, right);

@for $i from 1 through 20 {
  $space: $i * $multiplier;
  .m-#{$i} {
    margin: #{$space}px;
  }

  .p-#{$i} {
    padding: #{$space}px;
  }

  @each $side in $sides {
    .m-#{str-slice($side, 0, 1)}-#{$i} {
      margin-#{$side}: #{$space}px;
    }

    .p-#{str-slice($side, 0, 1)}-#{$i} {
      padding-#{$side}: #{$space}px;
    }
  }
}

/* Loop to generate padding and margin ends*/

/*rotate transform class starts*/

@for $i from 1 through 8 {
  $angle: $i * 45;
  .rotate-#{$angle} {
    transform: rotate(#{$angle}deg);
  }
}

/*rotate transform class ends*/

.mirror {
  -webkit-transform: scaleX(-1);
  transform: scaleX(-1);
}

.border {
  @include e(left) {
    border-left: 1px solid rgba(0, 0, 0, 0.1);
  }

  @include m(right) {
    border-right: 1px solid rgba(0, 0, 0, 0.1);
  }

  @include e(top) {
    border-top: 1px solid rgba(0, 0, 0, 0.1);
  }

  @include e(bottom) {
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  }
}

.text {
  @include m(bold) {
    font-weight: bold;
  }

  @include m(title) {
    text-transform: capitalize;
    font-weight: bold;
  }

  @include m(black) {
    color: #000000;
  }

  @include m(light) {
    color: rgba(0, 0, 0, 0.5);
  }
}

/* for side test panel*/
.test-link {
  position: fixed;
  left: 0;
  top: 70px;
  display: none;

  @include mq('lg') {
    display: block;
  }

  ul {
    li {
      margin: 10px;
    }
  }
}
